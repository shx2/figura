"""
Unit-tests testing the most basic features.
"""

################################################################
# Unittest definition

class test1:
    is_unittest = True
    class construct:
        entry_point = 'some_params'
        #apply_overrides = [ (overridden, overriding), ...]
    class verify:
        entry_point = 'RESULT'
        #operator = 'equals' ?

class test_identity:
    is_unittest = True
    class construct:
        entry_point = 'some_params'
    class verify:
        entry_point = 'some_params'

class test_nesting_in_container:
    is_unittest = True
    class construct:
        entry_point = 'container_nest'
    class verify:
        entry_point = 'container_nest_RESULT'

################################################################
# Unittest data

class some_params:
    a = 1
    b = 2

    # starting with underscore meaning private, i.e. not included in the ConfigContainer.
    _c_hidden = [3,4]
    c = _c_hidden

    class nested:
        d = 'five'

# no special constructs, the results is the same as what we defined
class RESULT:
    a = 1
    b = 2
    c = [3,4]
    class nested:
        d = 'five'

################################################################

class _foo:
    a = 1
    b = 2

_foo_dict = {'a':1, 'b':2}

class container_nest:
    foos1 = [ _foo, _foo, 2, _foo ]
    foos2 = { 0: _foo, 1: _foo, 2: 2, 333: _foo }

class container_nest_RESULT:
    foos1 = [ _foo_dict, _foo_dict, 2, _foo_dict]
    foos2 = { 0: _foo_dict, 1: _foo_dict, 2: 2, 333: _foo_dict }

################################################################
